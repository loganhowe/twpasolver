Search.setIndex({"docnames": ["api-reference/modules", "api-reference/twpasolver", "api-reference/twpasolver.analysis", "api-reference/twpasolver.basemodel", "api-reference/twpasolver.file_utils", "api-reference/twpasolver.frequency", "api-reference/twpasolver.logging", "api-reference/twpasolver.mathutils", "api-reference/twpasolver.matrices_arrays", "api-reference/twpasolver.models", "api-reference/twpasolver.models.compose", "api-reference/twpasolver.models.modelarray", "api-reference/twpasolver.models.oneport", "api-reference/twpasolver.models.rf_functions", "api-reference/twpasolver.models.transmission_lines", "api-reference/twpasolver.models.twoportarrays", "api-reference/twpasolver.models.twpa_cells", "api-reference/twpasolver.plotting", "api-reference/twpasolver.twoport", "api-reference/twpasolver.typing", "implementing_models", "index", "installation", "notebooks/01_models", "notebooks/02_twpas", "notebooks/03_analysis", "tutorials"], "filenames": ["api-reference/modules.rst", "api-reference/twpasolver.rst", "api-reference/twpasolver.analysis.rst", "api-reference/twpasolver.basemodel.rst", "api-reference/twpasolver.file_utils.rst", "api-reference/twpasolver.frequency.rst", "api-reference/twpasolver.logging.rst", "api-reference/twpasolver.mathutils.rst", "api-reference/twpasolver.matrices_arrays.rst", "api-reference/twpasolver.models.rst", "api-reference/twpasolver.models.compose.rst", "api-reference/twpasolver.models.modelarray.rst", "api-reference/twpasolver.models.oneport.rst", "api-reference/twpasolver.models.rf_functions.rst", "api-reference/twpasolver.models.transmission_lines.rst", "api-reference/twpasolver.models.twoportarrays.rst", "api-reference/twpasolver.models.twpa_cells.rst", "api-reference/twpasolver.plotting.rst", "api-reference/twpasolver.twoport.rst", "api-reference/twpasolver.typing.rst", "implementing_models.rst", "index.rst", "installation.rst", "notebooks/01_models.ipynb", "notebooks/02_twpas.ipynb", "notebooks/03_analysis.ipynb", "tutorials.rst"], "titles": ["twpasolver", "twpasolver package", "twpasolver.analysis module", "twpasolver.basemodel module", "twpasolver.file_utils module", "twpasolver.frequency module", "twpasolver.logging module", "twpasolver.mathutils module", "twpasolver.matrices_arrays module", "twpasolver.models package", "twpasolver.models.compose module", "twpasolver.models.modelarray module", "twpasolver.models.oneport module", "twpasolver.models.rf_functions module", "twpasolver.models.transmission_lines module", "twpasolver.models.twoportarrays module", "twpasolver.models.twpa_cells module", "twpasolver.plotting module", "twpasolver.twoport module", "twpasolver.typing module", "Implementing New Models", "Welcome to twpasolver\u2019s documentation!", "Installation", "Network models", "Constructing twpas", "3WM gain and TWPAnalysis", "Tutorials"], "terms": {"packag": [0, 21, 22, 26], "subpackag": [0, 23], "model": [0, 1, 2, 3, 5, 7, 18, 21, 25, 26], "import": [0, 1, 23, 24, 25], "usag": [0, 1, 25], "submodul": 0, "analysi": [0, 1, 9, 22, 25], "modul": [0, 1, 9, 21, 24], "analysis_funct": [0, 1, 2], "executionrequest": [0, 1, 2], "analyz": [0, 1, 2, 9, 12, 21, 23], "twpanalysi": [0, 1, 2, 21, 26], "basemodel": [0, 1, 2, 5, 18], "file_util": [0, 1], "read_fil": [0, 1, 4], "save_to_fil": [0, 1, 4], "add_extens": [0, 1, 4], "ensure_directory_exist": [0, 1, 4], "read_hdf5": [0, 1, 4], "read_json": [0, 1, 4], "save_to_hdf5": [0, 1, 4], "save_to_json": [0, 1, 4], "npencod": [0, 1, 4], "frequenc": [0, 1, 2, 7, 9, 12, 13, 14, 15, 17, 18, 20, 23, 24, 26], "log": [0, 1, 25], "customhandl": [0, 1, 6], "mathutil": [0, 1, 23, 25], "matmul_2x2": [0, 1, 7], "matpow_2x2": [0, 1, 7], "a2": [0, 1, 7], "s2a": [0, 1, 7], "to_db": [0, 1, 7, 23], "dbm_to_i": [0, 1, 7, 25], "i_to_dbm": [0, 1, 7], "compute_phase_match": [0, 1, 7], "cmeode_complet": [0, 1, 7], "cme_solv": [0, 1, 7], "matrices_arrai": [0, 1], "twobytwoarrai": [0, 1, 8], "abcdarrai": [0, 1, 8, 12, 14, 15, 16, 18, 20, 23], "smatrixarrai": [0, 1, 8, 18], "abcd_ident": [0, 1, 8], "plot": [0, 1, 2, 23, 24, 25], "plot_respons": [0, 1, 2, 17, 25], "plot_gain": [0, 1, 2, 17, 25], "plot_phase_match": [0, 1, 2, 17, 25], "twoport": [0, 1, 2, 12, 15, 23], "twoportcel": [0, 1, 18, 23], "twoportmodel": [0, 1, 2, 10, 11, 12, 14, 15, 16, 18, 21, 23], "type": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 18], "all_subclass": [0, 1, 19], "validate_imped": [0, 1, 18, 19], "thi": [1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 18, 20, 21, 23, 24, 25], "provid": [1, 2, 4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 20, 23, 25, 26], "basic": [1, 2, 11, 12, 15, 23, 25, 26], "tool": 1, "util": [1, 4, 7, 9, 25], "simul": [1, 9, 21, 25], "travel": [1, 21], "wave": [1, 7, 21, 25], "parametr": [1, 21], "amplifi": [1, 21], "twpa": [1, 2, 9, 10, 15, 16, 17, 21, 25, 26], "It": [1, 4, 5, 9, 15, 18, 23, 24, 25], "includ": [1, 4, 7, 9, 11, 15, 18, 23], "class": [1, 2, 3, 4, 5, 6, 8, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25], "function": [1, 2, 3, 4, 5, 7, 9, 12, 13, 14, 15, 17, 18, 20, 23, 26], "perform": [1, 7, 18, 25], "analys": 1, "handl": [1, 4, 18, 23], "file": [1, 2, 3, 4, 18, 23, 25], "work": [1, 4], "matric": [1, 7, 8, 11, 13, 15, 18, 23], "arrai": [1, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 25, 26], "specif": [1, 6, 15], "runner": [1, 2], "standard": [1, 2], "routin": [1, 2, 25], "3wm": [1, 2, 21, 26], "repres": [1, 2, 5, 8, 11, 12, 15, 18, 23, 24], "abcd": [1, 2, 7, 8, 11, 12, 13, 14, 15, 16, 18, 20, 23], "us": [1, 2, 4, 7, 9, 12, 20, 22, 23, 25, 26], "two": [1, 2, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 23], "port": [1, 2, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 23], "network": [1, 9, 11, 12, 15, 18, 20, 21, 26], "wrap": [1, 2], "an": [1, 2, 3, 4, 5, 8, 12, 13, 14, 15, 20, 21, 23, 24, 25], "addit": [1, 2, 3, 10, 13, 17, 23, 24, 25], "data": [1, 2, 4, 25], "convers": [1, 7], "other": [1, 11, 23, 25], "represent": [1, 2, 3, 7, 12, 15, 18], "respres": 1, "span": [1, 2, 5, 25], "variabl": [1, 5, 7, 25], "measur": [1, 5, 25], "unit": [1, 2, 5, 13, 17], "read": [1, 4], "from": [1, 2, 3, 4, 7, 9, 14, 18, 20, 23, 25, 26], "specifi": [1, 4, 23], "json": [1, 2, 3, 4, 5, 11, 12, 14, 15, 16, 18, 23, 25], "hdf5": [1, 2, 4, 18, 25], "save": [1, 2, 3, 4, 18, 25], "encod": [1, 4], "dictionari": [1, 2, 4, 18, 25], "compos": [1, 9, 12, 23, 24], "modelarrai": [1, 9, 10, 12, 15, 26], "oneport": [1, 9], "oneportmodel": [1, 2, 9, 10, 12, 15, 21, 23], "oneportarrai": [1, 2, 9, 10, 12, 15, 23], "resist": [1, 2, 9, 10, 12, 15, 20, 23], "capacit": [1, 2, 9, 10, 12, 13, 14, 15, 16, 23, 24], "induct": [1, 2, 9, 10, 12, 13, 14, 15, 16, 23, 24], "stub": [1, 2, 9, 10, 12, 13, 15, 16], "rf_function": [1, 9], "parallel_admittance_abcd": [1, 9, 13], "series_impedance_abcd": [1, 9, 13], "lossless_line_abcd": [1, 9, 13], "lclf_abcd": [1, 9, 13], "get_stub_cel": [1, 9, 13], "transmission_lin": [1, 9], "losslesstl": [1, 2, 9, 10, 14, 15], "twoportarrai": [1, 2, 9, 10, 20, 23, 24], "twpa_cel": [1, 9], "stubbasecel": [1, 2, 9, 10, 15, 16, 24], "lclfbasecel": [1, 2, 9, 10, 15, 16, 24, 25], "name": [1, 2, 4, 9, 12, 14, 15, 16, 18, 20, 23, 24, 25], "arg": [1, 2, 10, 20], "kwarg": [1, 2, 3, 10, 18], "data_fil": [1, 2], "run": [1, 2, 26], "model_post_init": [1, 2, 5], "update_base_data": [1, 2, 25], "save_data": [1, 2, 25], "load_data": [1, 2], "execut": [1, 2], "parameter_sweep": [1, 2, 25], "load_model_from_fil": [1, 2], "phase_match": [1, 2, 25], "gain": [1, 2, 17, 21, 24, 26], "bandwidth": [1, 2, 26], "model_dump": [1, 3, 23, 24, 25], "from_fil": [1, 3, 18, 23], "dump_to_fil": [1, 3, 18, 23], "default": [1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 25], "f_list": [1, 2, 5], "f_arang": [1, 2, 5, 25], "f": [1, 2, 5, 24], "omega": [1, 5], "unit_multipli": [1, 5], "format": [1, 4, 6, 18, 25], "shape": [1, 8], "len": [1, 8], "A": [1, 2, 8, 19, 23, 25], "b": [1, 8, 24], "c": [1, 2, 8, 9, 12, 13, 14, 15, 16, 23, 24, 25], "d": [1, 4, 8, 20, 25], "s11": [1, 8, 23], "s12": [1, 8], "s21": [1, 8, 17, 23, 24], "s22": [1, 8], "from_": [1, 18], "freq": [1, 7, 9, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24], "z0": [1, 2, 7, 9, 11, 12, 14, 15, 16, 18], "to_network": [1, 18], "": [1, 2, 5, 7, 8, 18, 23, 24, 25], "as_dict": [1, 18], "interpol": [1, 18], "z0_ref": [1, 2, 11, 12, 14, 15, 16, 18, 23, 24, 25], "n": [1, 2, 3, 11, 12, 14, 15, 16, 18, 23, 24, 25], "updat": [1, 2, 18], "single_abcd": [1, 9, 12, 14, 15, 16, 18], "get_abcd": [1, 18, 23], "get_cel": [1, 18, 23], "get_network": [1, 18, 23, 24], "func": [2, 18], "sourc": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26], "automat": [2, 23, 25], "result": [2, 7, 10, 25], "each": [2, 23], "all": [2, 10, 19, 20, 23, 25], "must": [2, 20, 25], "return": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23], "compat": [2, 23], "wrapper": 2, "pydant": [2, 3, 5, 11, 12, 14, 15, 16, 18, 20, 23], "base": [2, 3, 4, 5, 6, 8, 11, 12, 14, 15, 16, 18, 20, 23, 25], "gener": [2, 11, 15, 24], "stuctur": 2, "request": 2, "show": [2, 3, 5, 11, 12, 14, 15, 16, 18, 23, 24, 25], "schema": [2, 3, 5, 11, 12, 14, 15, 16, 18], "titl": [2, 3, 5, 11, 12, 14, 15, 16, 18], "descript": [2, 3, 5, 11, 12, 14, 15, 16, 18], "object": [2, 3, 4, 5, 8, 11, 12, 14, 15, 16, 18, 20, 23, 25], "properti": [2, 3, 5, 8, 11, 12, 14, 15, 16, 18, 20], "string": [2, 5, 12, 14, 15, 16], "item": [2, 5, 11, 12, 15], "requir": [2, 12, 14, 15, 16, 20, 25], "field": [2, 3, 5, 11, 12, 14, 15, 16, 18], "list": [2, 4, 5, 11, 12, 15, 19, 23, 25], "ani": [2, 4, 5, 7, 10, 11, 13], "dict": [2, 3, 4, 18], "str": [2, 3, 4, 17, 18, 19], "option": [2, 3, 7, 10, 11, 12, 15, 17], "abc": [2, 12, 18], "structur": [2, 23], "ref": [2, 11, 12, 14, 15, 16, 18], "def": [2, 12, 15, 20], "_analyzer__context": 2, "none": [2, 3, 4, 5, 11, 17, 18], "i": [2, 4, 5, 7, 10, 20, 21, 23, 24, 25], "empti": 2, "abstract": [2, 12, 18], "check": 2, "necessari": [2, 4, 20], "writer": [2, 4, 18], "filenam": [2, 3, 4, 18], "load": [2, 3, 18, 23, 24], "target": [2, 25], "valu": [2, 7, 13, 15, 17, 19, 23, 25], "multipl": [2, 7, 11, 15, 18, 23], "time": [2, 7, 25], "differ": [2, 7, 9, 18, 20, 23], "paramet": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 24, 26], "argument": [2, 3, 5, 10, 17, 24, 25], "chang": [2, 21], "sweep": [2, 26], "contain": [2, 4, 11, 12, 14, 15, 18, 20, 23, 25], "The": [2, 3, 4, 5, 9, 11, 14, 15, 19, 23, 24, 25], "organ": [2, 11, 15], "dimens": 2, "anyof": [2, 5], "minimum": [2, 5, 11, 12, 14, 15, 16, 18], "0": [2, 5, 7, 8, 11, 12, 14, 15, 16, 17, 18, 23, 24, 25], "number": [2, 5, 7, 8, 10, 11, 12, 14, 15, 16, 18, 24], "null": [2, 5], "maxitem": [2, 5], "3": [2, 5, 18, 23, 24, 25], "minitem": [2, 5], "prefixitem": [2, 5], "tupl": [2, 5, 7, 17, 25], "pass": [2, 5, 10, 20, 25], "numpi": [2, 4, 5, 18, 20, 23, 24, 25], "arang": [2, 5, 23, 24, 25], "construct": [2, 5, 9, 20, 21, 23, 26], "ghz": [2, 5, 17, 24, 25], "enum": [2, 5, 12, 14, 15, 16], "hz": [2, 5], "khz": [2, 5], "mhz": [2, 5], "thz": [2, 5], "capacitor": [2, 9, 12, 13, 15, 24, 26], "50": [2, 7, 9, 11, 12, 14, 15, 16, 18, 23, 24, 25], "refer": [2, 7, 11, 12, 14, 15, 16, 18, 20], "line": [2, 9, 11, 12, 13, 14, 15, 16, 18], "imped": [2, 7, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23], "compon": [2, 9, 11, 12, 13, 14, 15, 16, 18, 20, 23, 26], "1": [2, 7, 8, 11, 12, 14, 15, 16, 17, 18, 20, 23, 24, 25], "repetit": [2, 11, 12, 14, 15, 16, 18, 23], "comput": [2, 5, 7, 9, 11, 12, 14, 15, 16, 18, 23, 25], "matrix": [2, 7, 11, 12, 13, 14, 15, 16, 18, 20, 23], "integ": [2, 11, 12, 14, 15, 16, 18], "twoport_parallel": [2, 9, 12, 15, 20, 23, 24], "fals": [2, 4, 10, 12, 15, 16, 23, 24, 25], "insert": [2, 12, 15, 20, 23], "parallel": [2, 9, 10, 12, 13, 15, 20, 23], "when": [2, 4, 5, 12, 15, 20, 23, 25], "transform": [2, 12, 15], "boolean": [2, 12, 15, 16], "const": [2, 12, 14, 15, 16], "inductor": [2, 9, 12, 15, 23, 24], "l": [2, 9, 12, 13, 14, 15, 16, 23, 24, 25], "cell": [2, 9, 11, 12, 13, 15, 16, 18, 23, 24, 25], "lc": [2, 15, 16, 26], "straight": [2, 15, 16], "finger": [2, 15, 16, 24], "lf": [2, 9, 13, 15, 16, 24, 25], "center": [2, 9, 15, 16, 24, 25], "lossless": [2, 13, 14, 15], "transmiss": [2, 13, 14, 15], "length": [2, 8, 9, 12, 13, 14, 15, 16], "characterist": [2, 14, 15, 24, 25], "direct": [2, 10, 12, 15], "composit": [2, 9, 10, 12, 15, 23, 24], "nest": [2, 4, 11, 12, 15, 23], "ar": [2, 3, 4, 7, 10, 11, 12, 15, 20, 23, 25], "allow": [2, 9, 11, 12, 15, 23, 25], "discrimin": [2, 12, 15, 20], "map": [2, 12, 15], "propertynam": [2, 12, 15], "oneof": [2, 12, 15], "connect": [2, 12, 15, 23], "intern": [2, 8, 11, 12, 15, 18, 25], "resistor": [2, 9, 12, 15, 20], "r": [2, 9, 12, 15, 20, 23], "open": [2, 9, 12, 13, 15, 21], "true": [2, 3, 4, 12, 13, 15, 17, 18, 23, 24, 25], "filter": [2, 15, 16], "l1": [2, 9, 13, 15, 16], "l2": [2, 9, 13, 15, 16, 24], "distribut": [2, 15, 16], "element": [2, 8, 12, 15, 16, 20, 23, 24], "instead": [2, 15, 16, 18], "lump": [2, 15, 16], "simpl": [2, 9, 15, 23, 24, 25], "istar": [2, 9, 15, 24, 25], "0065": [2, 15, 24], "nonlinear": [2, 7, 15, 24], "scale": [2, 15], "current": [2, 7, 15, 21, 25], "idc": [2, 9, 15, 24, 25], "001": [2, 15, 24, 25], "bia": [2, 15], "dc": [2, 15], "ip0": [2, 9, 15, 24, 25], "0002": [2, 15, 24], "rf": [2, 7, 9, 12, 15, 18, 23], "pump": [2, 7, 15, 17, 26], "amplitud": [2, 7, 15], "valid": [2, 11, 12, 15, 19, 23], "try": 2, "extract": 2, "trigger": 2, "everi": 2, "after": [2, 7], "thin": [2, 17, 25], "int": [2, 4, 7, 8, 15, 17, 18], "20": 2, "build": [2, 12, 23], "phase": [2, 7, 14, 15, 17, 18, 24, 26], "match": [2, 7, 15, 17, 24, 26], "profil": [2, 7, 24, 25], "condit": [2, 7, 9, 24, 25], "consid": [2, 24, 25], "signal": [2, 7, 17, 25], "lower": [2, 25], "than": [2, 25], "first": [2, 13, 15, 25], "stopband": [2, 24, 25], "end": [2, 25], "step": [2, 24, 26], "size": [2, 17, 25], "out": 2, "wavenumb": 2, "delta": 2, "triplet": [2, 7], "satisfi": 2, "k": [2, 7, 17, 24], "pump_freq": [2, 7, 17, 25], "signal_freq": [2, 17, 25], "ndarrai": [2, 5, 7, 8, 12, 13, 14, 15, 16, 17, 18, 20], "dtype": [2, 7, 13], "float64": [2, 7, 13], "float": [2, 4, 5, 7, 13, 14, 15, 16, 17, 18, 19], "is0": [2, 25], "1e": [2, 9, 23, 24, 25], "06": 2, "100": 2, "expect": 2, "floatarrai": [2, 7, 13], "If": [2, 10, 13, 26], "optim": [2, 7, 25], "initi": [2, 7, 14, 25], "posit": [2, 7, 25], "otherwis": [2, 10, 13, 23], "calcul": [2, 9, 13, 20, 23, 25], "x": [2, 7], "along": 2, "i_triplet": 2, "idler": [2, 7], "gain_db": [2, 17, 25], "final": [2, 23], "db": [2, 7, 17, 23, 24, 25], "gain_reduct": 2, "gain_kwarg": 2, "inform": [2, 20], "about": [2, 20], "compund": 2, "maximum": [2, 25], "threshold": [2, 25], "determin": [2, 24, 25], "edg": [2, 25], "bandwidth_edg": [2, 25], "section": [2, 13], "abov": 2, "total_bw": 2, "total": [2, 15, 25], "max_gain": 2, "observ": [2, 23], "reduced_gain": [2, 25], "level": 2, "mean_gain": [2, 25], "mean": [2, 21, 24, 25], "across": 2, "rang": [2, 23, 24, 25], "bw_freq": [2, 25], "where": [2, 3], "ax": [2, 17, 25], "respons": [2, 9, 17, 23, 24, 25], "context": [2, 5], "we": [2, 23, 24], "need": [2, 20], "both": [2, 23], "privat": [2, 5], "attribut": [2, 5, 18, 20, 23], "call": [2, 5, 23, 25], "user": [2, 11, 15, 20], "defin": [2, 5, 9, 11, 15, 20, 23, 24, 25], "method": [2, 3, 5, 18, 20, 23, 25], "custom": [3, 6, 20, 24], "overload": 3, "overridden": 3, "extend": [3, 20], "exclud": 3, "serial": [3, 23], "add": [3, 4, 20], "dump": [3, 18, 23], "nthi": 3, "nand": 3, "exclude_non": 3, "bool": [3, 10, 12, 13, 16, 17, 18], "mode": [3, 7, 21, 22, 25], "overrid": 3, "whether": [3, 17], "keyword": [3, 10, 17], "classmethod": [3, 14, 18], "instanc": [3, 5, 10, 14, 18, 23, 25], "path": 3, "which": [3, 7, 14, 19, 20, 23, 24, 25], "write": 4, "ensur": 4, "extens": 4, "directori": [4, 26], "correctli": [4, 25], "well": [4, 9], "recurs": [4, 7, 11, 19], "savenam": 4, "alreadi": [4, 20], "present": [4, 23], "given": [4, 7, 9, 10, 14, 18, 19], "exist": 4, "creat": [4, 11, 18, 23, 24], "skipkei": 4, "ensure_ascii": 4, "check_circular": 4, "allow_nan": 4, "sort_kei": 4, "indent": 4, "separ": 4, "jsonencod": 4, "o": 4, "definit": [5, 25], "can": [5, 9, 12, 20, 23, 24, 25, 26], "either": [5, 23, 25], "liter": [5, 12, 14, 15, 16, 20], "annot": [5, 19], "ge": [5, 12, 14, 15, 16, 18], "angular": 5, "get": [5, 8, 12, 14, 18, 19, 20, 23], "multipli": [5, 23], "chosen": [5, 25], "correspond": 5, "meant": 5, "behav": 5, "like": [5, 15, 24], "initialis": 5, "take": [5, 20, 25], "sinc": [5, 20, 23, 25], "what": 5, "core": [5, 23], "self": [5, 20], "logger": 6, "configur": [6, 10, 23], "streamhandl": 6, "handler": 6, "algorithm": [6, 25], "credit": 6, "qiboc": 6, "record": 6, "mathemat": 7, "express": [7, 24], "equat": [7, 21, 25], "set": [7, 20], "numba": [7, 24, 25], "high": [7, 25], "These": [7, 9, 12, 23, 26], "between": [7, 10, 15, 18, 20, 24, 25], "solut": 7, "coupl": [7, 21, 25], "engin": 7, "matrices_a": 7, "complex128": [7, 13], "matrices_b": 7, "fast": 7, "2x2": [7, 8, 23], "complexarrai": [7, 13], "complex": [7, 9, 12, 18, 19, 23], "expon": 7, "exponenti": 7, "rais": 7, "convert": [7, 18, 23], "spar": 7, "power": [7, 25], "dbm": [7, 25], "amper": 7, "ohm": 7, "curr": 7, "k_signal_arrai": 7, "k_pump_arrai": 7, "chi": [7, 9, 15, 24, 25], "coeffici": [7, 15], "t": 7, "y": [7, 9, 12, 13], "kp": 7, "ki": [7, 24], "xi": [7, 9, 15, 24, 25], "epsi": 7, "complet": 7, "ip": 7, "2": [7, 18, 23, 24, 25], "ii": 7, "a5a": 7, "a5b": 7, "a5c": 7, "prx": 7, "quantum": 7, "010302": 7, "2021": 7, "small": 7, "perturb": 7, "deriv": [7, 20, 23, 24], "dip": 7, "dt": 7, "di": 7, "dii": 7, "k_signal": 7, "k_idler": 7, "x_arrai": 7, "y0": 7, "k_pump": 7, "solv": [7, 21, 25], "evalu": [7, 14], "mat": 8, "n_abcd": 8, "ident": 8, "collect": [9, 17], "variou": [9, 14, 23], "one": [9, 12, 20, 23, 25], "more": [9, 12, 23], "One": [9, 12], "anymodel": [9, 10, 15], "studi": 9, "behavior": [9, 21], "under": 9, "support": 9, "oper": [9, 18, 23], "simpler": 9, "see": 9, "tutori": [9, 21, 24, 25], "page": [9, 21], "exampl": [9, 18, 20, 26], "seri": [9, 10, 12, 13, 20, 23], "12": [9, 18, 23, 24], "np": [9, 12, 13, 14, 15, 17, 18, 20, 23, 24, 25], "linspac": [9, 23], "1e6": [9, 23], "1e9": [9, 18, 23, 24], "1000": [9, 24, 25], "abcd_param": 9, "validate_nested_cel": [9, 11, 12, 15], "append": [9, 11, 23], "z": [9, 12, 13, 19, 20], "from_z_vp": [9, 14], "vp": [9, 14], "epsilon": [9, 15, 24, 25], "alpha": [9, 15, 24, 25], "iratio": [9, 15, 24, 25], "n_tot": [9, 15, 24, 25], "directli": [10, 23], "same": [10, 23], "circuit": [10, 20, 23, 24], "indic": 10, "should": [10, 25], "appli": 10, "onli": [10, 24, 25], "possibl": [10, 23, 24, 25], "constructor": 10, "manipul": [11, 15, 18], "insid": 11, "potenti": [11, 25], "new": [11, 18, 21, 24], "describ": 12, "entir": [12, 23], "1d": 12, "admitt": [12, 13], "allof": [12, 15], "anyoneportmodel": 12, "nonnegativefloat": [12, 14, 15, 16, 20], "constraint": [12, 14, 15, 16, 18], "compil": [13, 25], "short": 13, "per": 13, "lclf": 13, "second": [13, 15, 25], "propag": 14, "constant": 14, "veloc": 14, "portion": 14, "also": [15, 22, 24], "special": [15, 20, 23, 24, 25], "applic": 15, "combin": [15, 23], "order": 15, "term": 15, "relat": 15, "correct": [15, 23], "ratio": 15, "nonnegativeint": [15, 18], "s21_db": 17, "k_star": 17, "freqs_unit": 17, "figsiz": 17, "5": [17, 18, 24, 25], "6": [17, 18, 24, 25], "plot_kwarg": 17, "figur": 17, "delta_pm": 17, "log_ab": 17, "mismatch": 17, "factor": 17, "logarithm": 17, "absolut": 17, "depend": [18, 24, 25], "common": [18, 23], "2e9": [18, 23], "3e9": 18, "4": [18, 23, 24, 25], "7": [18, 24, 25], "8": [18, 25], "9": [18, 23, 24], "10": [18, 24, 25], "11": [18, 24, 25], "s_param": 18, "new_freq": 18, "5e9": [18, 23], "interpolated_cel": 18, "cell_data": 18, "loaded_cel": 18, "s_mat": 18, "instanti": 18, "scikit": [18, 23], "content": 18, "polar": 18, "magnitud": [18, 24], "real": 18, "imaginari": 18, "part": 18, "__module__": 18, "__get_pydantic_core_schema__": 18, "bound": 18, "_impedance2pydanticannot": 18, "__get_pydantic_json_schema__": 18, "__dict__": 18, "0x7f8b26257d00": 18, "0x7f8b26257d90": 18, "__weakref__": 18, "__doc__": 18, "0x7f8b26257be0": 18, "singl": [18, 20, 24], "iter": [18, 20], "cl": 19, "subclass": [19, 20, 23], "find": [19, 24, 25], "input": [19, 20, 23, 25], "guid": [20, 26], "explain": 20, "how": [20, 23, 24, 25], "own": 20, "For": 20, "detail": [20, 24], "api": 20, "document": 20, "To": 20, "you": [20, 26], "get_single_abcd": 20, "addition": 20, "make": [20, 23], "avail": 20, "integr": 20, "new_model_class_nam": 20, "librari": [20, 21, 23, 25], "have": [20, 23], "uniqu": 20, "recommend": 20, "mytwoportmodel": 20, "logic": 20, "here": [20, 24], "twpasolv": [20, 22, 23, 24, 25, 26], "being": 20, "In": [20, 23], "case": 20, "accord": 20, "concret": 20, "anoth": [20, 23, 24], "full_lik": 20, "design": [21, 24, 25], "system": [21, 25], "differenti": 21, "known": 21, "cme": [21, 25], "pleas": 21, "note": 21, "veri": 21, "earli": 21, "develop": [21, 22], "stage": 21, "subject": 21, "signific": 21, "instal": 21, "implement": [21, 23, 24, 25], "ad": 21, "index": [21, 23], "search": 21, "clone": 22, "repositori": [22, 26], "git": 22, "http": 22, "github": 22, "com": 22, "twpalab": 22, "normal": 22, "pip": 22, "poetri": 22, "latest": 22, "version": 22, "rememb": 22, "pre": 22, "commit": 22, "doc": [22, 26], "capabl": 23, "focus": 23, "involv": [23, 25], "offer": 23, "hous": 23, "within": 23, "its": [23, 25], "found": [23, 26], "access": [23, 25], "freq_arrai": 23, "effici": 23, "fundament": 23, "block": 23, "concaten": 23, "some": [23, 24, 25], "featur": [23, 25], "consecut": 23, "through": [23, 25], "let": [23, 24, 25], "start": [23, 24, 25, 26], "over": [23, 25], "matplotlib": [23, 24, 25], "pyplot": [23, 24, 25], "plt": [23, 24, 25], "10e9": 23, "c_val": 23, "pf": 23, "net": [23, 24], "plot_s_db": [23, 24], "label": [23, 24], "skrf": 23, "lw": [23, 24], "ylabel": [23, 24, 25], "legend": [23, 24], "recov": 23, "c_recov": 23, "print": 23, "39": [23, 24, 25], "assembl": 23, "overal": 23, "retriev": 23, "done": 23, "wither": 23, "wai": 23, "form": 23, "thei": [23, 26], "them": 23, "simplifi": 23, "kind": 23, "slice": 23, "now": [23, 24], "2e6": [23, 24], "f_re": 23, "l_val": 23, "r_val": 23, "pi": [23, 24], "lcre": 23, "lcarrai": 23, "8e9": 23, "At": 24, "moment": 24, "reposn": 24, "josephson": 24, "junction": 24, "easili": 24, "devic": [24, 25], "certain": [24, 25], "unload": 24, "effect": [24, 25], "without": 24, "compar": 24, "njit": 24, "12e9": 24, "n_u": 24, "60": 24, "n_l": 24, "n_sc": 24, "c_u": 24, "18": 24, "81e": 24, "15": [24, 25], "c_l": 24, "0e": 24, "c_eff": 24, "h": 24, "l_u": 24, "45": 24, "2e": [24, 25], "l_l": 24, "l_eff": 24, "l_f_u": 24, "02e": 24, "l_f_l": 24, "335e": 24, "l_f_eff": 24, "z_0": 24, "sqrt": 24, "z_l": 24, "z_eff": 24, "l1_u": 24, "102e": 24, "l1_l": 24, "33": 24, "5e": [24, 25], "next": 24, "appendix": 24, "1103": 24, "prxquantum": 24, "unmodul": 24, "eff": 24, "twpa_not_load": 24, "30": [24, 25], "52e": 24, "881e": 24, "14": [24, 25], "09": 24, "7e": [24, 25], "35e": 24, "46": 24, "242774566474": 24, "23121": 24, "387283236996": 24, "00011560693641618498": 24, "0236686390532543": 24, "15384615384615385": 24, "66000": 24, "As": 24, "usual": 24, "s_": 24, "21": 24, "net_unmodul": 24, "No": 24, "grid": 24, "aspect": 24, "reson": [24, 26], "restrict": 24, "control": 24, "linear_disp": 24, "s_rad_unwrap": 24, "flatten": 24, "xlabel": [24, 25], "rad": 24, "explicitli": 24, "repoduc": 24, "l_line_u": 24, "fingers_u": 24, "cell_u": 24, "l_line_l": 24, "fingers_l": 24, "cell_l": 24, "twpa_from_bas": 24, "demonstr": 25, "autom": 25, "procedur": 25, "cach": 25, "respectv": 25, "limit": 25, "mix": 25, "sytem": 25, "reflect": 25, "harmon": 25, "isol": 25, "full": 25, "region": 25, "precaut": 25, "choos": 25, "taken": 25, "unwrap": 25, "dens": 25, "enough": 25, "much": 25, "follow": 25, "store": 25, "setlevel": 25, "warn": 25, "rcparam": 25, "font": 25, "13": 25, "axisbelow": 25, "twpa_fil": 25, "model_cpw_dartwars_13nm_lk8_5": 25, "estim": 25, "optimal_pump_freq": 25, "500": 25, "99e": 25, "42e": 25, "86e": 25, "8e": 25, "0063": 25, "00025": 25, "49": 25, "15212582944213": 25, "24576": 25, "062914721064": 25, "0001920004915212583": 25, "0251952632905015": 25, "15873015873015872": 25, "33000": 25, "By": 25, "begin": 25, "while": 25, "_": 25, "rung": 25, "kutta": 25, "mai": 25, "becom": 25, "faster": 25, "afterward": 25, "s_arang": 25, "05": 25, "keep": 25, "track": 25, "asymmetri": 25, "lobe": 25, "due": 25, "deplet": 25, "choic": 25, "discontinu": 25, "3e": 25, "axvlin": 25, "color": 25, "black": 25, "axhlin": 25, "three": 25, "02": 25, "pumpsweep_r": 25, "save_nam": 25, "pump_profil": 25, "pcolor": 25, "colorbar": 25, "set_label": 25, "signals_db": 25, "80": 25, "40": 25, "compression_r": 25, "axi": 25, "reduced_1db": 25, "cp_1db": 25, "interp": 25, "scatter": 25, "showcas": 26, "wish": 26, "modifi": 26, "notebook": 26, "overview": 26, "predefin": 26, "overivew": 26, "setup": 26, "compress": 26, "point": 26}, "objects": {"": [[1, 0, 0, "-", "twpasolver"]], "twpasolver": [[2, 0, 0, "-", "analysis"], [3, 0, 0, "-", "basemodel"], [4, 0, 0, "-", "file_utils"], [5, 0, 0, "-", "frequency"], [6, 0, 0, "-", "logging"], [7, 0, 0, "-", "mathutils"], [8, 0, 0, "-", "matrices_arrays"], [9, 0, 0, "-", "models"], [17, 0, 0, "-", "plotting"], [18, 0, 0, "-", "twoport"], [19, 0, 0, "-", "typing"]], "twpasolver.analysis": [[2, 1, 1, "", "Analyzer"], [2, 1, 1, "", "ExecutionRequest"], [2, 1, 1, "", "TWPAnalysis"], [2, 5, 1, "", "analysis_function"]], "twpasolver.analysis.Analyzer": [[2, 2, 1, "", "data"], [2, 2, 1, "", "data_file"], [2, 3, 1, "", "execute"], [2, 3, 1, "", "load_data"], [2, 3, 1, "", "model_post_init"], [2, 3, 1, "", "parameter_sweep"], [2, 2, 1, "", "run"], [2, 3, 1, "", "save_data"], [2, 3, 1, "", "update_base_data"]], "twpasolver.analysis.ExecutionRequest": [[2, 2, 1, "", "args"], [2, 2, 1, "", "kwargs"], [2, 2, 1, "", "name"]], "twpasolver.analysis.TWPAnalysis": [[2, 3, 1, "", "bandwidth"], [2, 3, 1, "", "gain"], [2, 4, 1, "", "load_model_from_file"], [2, 3, 1, "", "model_post_init"], [2, 3, 1, "", "phase_matching"], [2, 3, 1, "", "plot_gain"], [2, 3, 1, "", "plot_phase_matching"], [2, 3, 1, "", "plot_response"], [2, 2, 1, "", "twpa"], [2, 3, 1, "", "update_base_data"]], "twpasolver.basemodel": [[3, 1, 1, "", "BaseModel"]], "twpasolver.basemodel.BaseModel": [[3, 3, 1, "", "dump_to_file"], [3, 3, 1, "", "from_file"], [3, 3, 1, "", "model_dump"]], "twpasolver.file_utils": [[4, 6, 1, "", "NpEncoder"], [4, 5, 1, "", "add_extension"], [4, 5, 1, "", "ensure_directory_exists"], [4, 5, 1, "", "read_file"], [4, 5, 1, "", "read_hdf5"], [4, 5, 1, "", "read_json"], [4, 5, 1, "", "save_to_file"], [4, 5, 1, "", "save_to_hdf5"], [4, 5, 1, "", "save_to_json"]], "twpasolver.file_utils.NpEncoder": [[4, 3, 1, "", "default"]], "twpasolver.frequency": [[5, 1, 1, "", "Frequencies"]], "twpasolver.frequency.Frequencies": [[5, 7, 1, "", "f"], [5, 2, 1, "", "f_arange"], [5, 2, 1, "", "f_list"], [5, 3, 1, "", "model_post_init"], [5, 7, 1, "", "omega"], [5, 2, 1, "", "unit"], [5, 7, 1, "", "unit_multiplier"]], "twpasolver.logging": [[6, 6, 1, "", "CustomHandler"]], "twpasolver.logging.CustomHandler": [[6, 3, 1, "", "format"]], "twpasolver.mathutils": [[7, 5, 1, "", "CMEode_complete"], [7, 5, 1, "", "I_to_dBm"], [7, 5, 1, "", "a2s"], [7, 5, 1, "", "cme_solve"], [7, 5, 1, "", "compute_phase_matching"], [7, 5, 1, "", "dBm_to_I"], [7, 5, 1, "", "matmul_2x2"], [7, 5, 1, "", "matpow_2x2"], [7, 5, 1, "", "s2a"], [7, 5, 1, "", "to_dB"]], "twpasolver.matrices_arrays": [[8, 6, 1, "", "ABCDArray"], [8, 6, 1, "", "SMatrixArray"], [8, 6, 1, "", "TwoByTwoArray"], [8, 5, 1, "", "abcd_identity"]], "twpasolver.matrices_arrays.ABCDArray": [[8, 7, 1, "", "A"], [8, 7, 1, "", "B"], [8, 7, 1, "", "C"], [8, 7, 1, "", "D"]], "twpasolver.matrices_arrays.SMatrixArray": [[8, 7, 1, "", "S11"], [8, 7, 1, "", "S12"], [8, 7, 1, "", "S21"], [8, 7, 1, "", "S22"]], "twpasolver.matrices_arrays.TwoByTwoArray": [[8, 7, 1, "", "len"], [8, 7, 1, "", "shape"]], "twpasolver.models": [[10, 0, 0, "-", "compose"], [11, 0, 0, "-", "modelarray"], [12, 0, 0, "-", "oneport"], [13, 0, 0, "-", "rf_functions"], [14, 0, 0, "-", "transmission_lines"], [15, 0, 0, "-", "twoportarrays"], [16, 0, 0, "-", "twpa_cells"]], "twpasolver.models.compose": [[10, 5, 1, "", "compose"]], "twpasolver.models.modelarray": [[11, 1, 1, "", "ModelArray"]], "twpasolver.models.modelarray.ModelArray": [[11, 3, 1, "", "append"], [11, 2, 1, "", "cells"], [11, 4, 1, "", "validate_nested_cells"]], "twpasolver.models.oneport": [[12, 1, 1, "", "Capacitance"], [12, 1, 1, "", "Inductance"], [12, 1, 1, "", "OnePortArray"], [12, 1, 1, "", "OnePortModel"], [12, 1, 1, "", "Resistance"], [12, 1, 1, "", "Stub"]], "twpasolver.models.oneport.Capacitance": [[12, 2, 1, "", "C"], [12, 3, 1, "", "Z"], [12, 2, 1, "", "name"]], "twpasolver.models.oneport.Inductance": [[12, 2, 1, "", "L"], [12, 3, 1, "", "Z"], [12, 2, 1, "", "name"]], "twpasolver.models.oneport.OnePortArray": [[12, 3, 1, "", "Z"], [12, 2, 1, "", "cells"], [12, 2, 1, "", "name"], [12, 2, 1, "", "parallel"]], "twpasolver.models.oneport.OnePortModel": [[12, 3, 1, "", "Y"], [12, 3, 1, "", "Z"], [12, 3, 1, "", "single_abcd"], [12, 2, 1, "", "twoport_parallel"]], "twpasolver.models.oneport.Resistance": [[12, 2, 1, "", "R"], [12, 3, 1, "", "Z"], [12, 2, 1, "", "name"]], "twpasolver.models.oneport.Stub": [[12, 2, 1, "", "C"], [12, 2, 1, "", "L"], [12, 3, 1, "", "Z"], [12, 2, 1, "", "length"], [12, 2, 1, "", "name"], [12, 2, 1, "", "open"]], "twpasolver.models.rf_functions": [[13, 5, 1, "", "LCLf_abcd"], [13, 5, 1, "", "capacitance"], [13, 5, 1, "", "get_stub_cell"], [13, 5, 1, "", "inductance"], [13, 5, 1, "", "lossless_line_abcd"], [13, 5, 1, "", "parallel_admittance_abcd"], [13, 5, 1, "", "series_impedance_abcd"], [13, 5, 1, "", "stub"]], "twpasolver.models.transmission_lines": [[14, 1, 1, "", "LosslessTL"]], "twpasolver.models.transmission_lines.LosslessTL": [[14, 2, 1, "", "C"], [14, 2, 1, "", "L"], [14, 7, 1, "", "Z0"], [14, 3, 1, "", "from_z_vp"], [14, 2, 1, "", "l"], [14, 2, 1, "", "name"], [14, 3, 1, "", "single_abcd"], [14, 7, 1, "", "vp"]], "twpasolver.models.twoportarrays": [[15, 1, 1, "", "TWPA"], [15, 1, 1, "", "TwoPortArray"]], "twpasolver.models.twoportarrays.TWPA": [[15, 2, 1, "", "Idc"], [15, 2, 1, "", "Ip0"], [15, 7, 1, "", "Iratio"], [15, 2, 1, "", "Istar"], [15, 7, 1, "", "N_tot"], [15, 7, 1, "", "alpha"], [15, 7, 1, "", "chi"], [15, 7, 1, "", "epsilon"], [15, 2, 1, "", "name"], [15, 7, 1, "", "xi"]], "twpasolver.models.twoportarrays.TwoPortArray": [[15, 2, 1, "", "cells"], [15, 2, 1, "", "name"], [15, 3, 1, "", "single_abcd"]], "twpasolver.models.twpa_cells": [[16, 1, 1, "", "LCLfBaseCell"], [16, 1, 1, "", "StubBaseCell"]], "twpasolver.models.twpa_cells.LCLfBaseCell": [[16, 2, 1, "", "C"], [16, 2, 1, "", "L"], [16, 2, 1, "", "Lf"], [16, 2, 1, "", "centered"], [16, 2, 1, "", "name"], [16, 3, 1, "", "single_abcd"]], "twpasolver.models.twpa_cells.StubBaseCell": [[16, 2, 1, "", "C"], [16, 2, 1, "", "L"], [16, 2, 1, "", "Lf"], [16, 2, 1, "", "l1"], [16, 2, 1, "", "l2"], [16, 2, 1, "", "line"], [16, 2, 1, "", "name"], [16, 3, 1, "", "single_abcd"]], "twpasolver.plotting": [[17, 5, 1, "", "plot_gain"], [17, 5, 1, "", "plot_phase_matching"], [17, 5, 1, "", "plot_response"]], "twpasolver.twoport": [[18, 6, 1, "", "TwoPortCell"], [18, 1, 1, "", "TwoPortModel"]], "twpasolver.twoport.TwoPortCell": [[18, 7, 1, "", "Z0"], [18, 3, 1, "", "as_dict"], [18, 3, 1, "", "dump_to_file"], [18, 7, 1, "", "freqs"], [18, 3, 1, "", "from_file"], [18, 3, 1, "", "from_s"], [18, 3, 1, "", "interpolate"], [18, 7, 1, "", "s"], [18, 3, 1, "", "to_network"]], "twpasolver.twoport.TwoPortModel": [[18, 2, 1, "", "N"], [18, 2, 1, "", "Z0_ref"], [18, 3, 1, "", "get_abcd"], [18, 3, 1, "", "get_cell"], [18, 3, 1, "", "get_network"], [18, 3, 1, "", "single_abcd"], [18, 3, 1, "", "update"]], "twpasolver.typing": [[19, 5, 1, "", "all_subclasses"], [19, 5, 1, "", "validate_impedance"]]}, "objtypes": {"0": "py:module", "1": "py:pydantic_model", "2": "py:pydantic_field", "3": "py:method", "4": "py:pydantic_validator", "5": "py:function", "6": "py:class", "7": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "pydantic_model", "Python model"], "2": ["py", "pydantic_field", "Python field"], "3": ["py", "method", "Python method"], "4": ["py", "pydantic_validator", "Python validator"], "5": ["py", "function", "Python function"], "6": ["py", "class", "Python class"], "7": ["py", "property", "Python property"]}, "titleterms": {"twpasolv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "packag": [1, 9], "subpackag": 1, "submodul": [1, 9], "analysi": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "basemodel": 3, "file_util": 4, "frequenc": [5, 25], "log": 6, "mathutil": 7, "matrices_arrai": 8, "model": [9, 10, 11, 12, 13, 14, 15, 16, 20, 23, 24], "import": 9, "usag": 9, "compos": 10, "modelarrai": [11, 23], "oneport": 12, "rf_function": 13, "transmission_lin": 14, "twoportarrai": 15, "twpa_cel": 16, "plot": 17, "twoport": 18, "type": 19, "implement": 20, "new": 20, "ad": 20, "twoportmodel": 20, "oneportmodel": 20, "welcom": 21, "": 21, "document": 21, "content": 21, "api": 21, "refer": 21, "indic": 21, "tabl": 21, "instal": 22, "network": 23, "overview": 23, "exampl": [23, 25], "capacitor": 23, "lc": 23, "reson": 23, "arrai": 23, "construct": 24, "twpa": 24, "us": 24, "predefin": 24, "from": 24, "basic": 24, "compon": 24, "3wm": 25, "gain": 25, "twpanalysi": 25, "overivew": 25, "setup": 25, "phase": 25, "match": 25, "bandwidth": 25, "paramet": 25, "sweep": 25, "function": 25, "pump": 25, "compress": 25, "point": 25, "tutori": 26}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"twpasolver": [[0, "twpasolver"]], "twpasolver package": [[1, "module-twpasolver"]], "Subpackages": [[1, "subpackages"]], "Submodules": [[1, "submodules"], [9, "submodules"]], "twpasolver.analysis module": [[2, "module-twpasolver.analysis"]], "twpasolver.basemodel module": [[3, "module-twpasolver.basemodel"]], "twpasolver.file_utils module": [[4, "module-twpasolver.file_utils"]], "twpasolver.frequency module": [[5, "module-twpasolver.frequency"]], "twpasolver.logging module": [[6, "module-twpasolver.logging"]], "twpasolver.mathutils module": [[7, "module-twpasolver.mathutils"]], "twpasolver.matrices_arrays module": [[8, "module-twpasolver.matrices_arrays"]], "twpasolver.models package": [[9, "module-twpasolver.models"]], "Imports": [[9, "imports"]], "Usage": [[9, "usage"]], "twpasolver.models.compose module": [[10, "module-twpasolver.models.compose"]], "twpasolver.models.modelarray module": [[11, "module-twpasolver.models.modelarray"]], "twpasolver.models.oneport module": [[12, "module-twpasolver.models.oneport"]], "twpasolver.models.rf_functions module": [[13, "module-twpasolver.models.rf_functions"]], "twpasolver.models.transmission_lines module": [[14, "module-twpasolver.models.transmission_lines"]], "twpasolver.models.twoportarrays module": [[15, "module-twpasolver.models.twoportarrays"]], "twpasolver.models.twpa_cells module": [[16, "module-twpasolver.models.twpa_cells"]], "twpasolver.plotting module": [[17, "module-twpasolver.plotting"]], "twpasolver.twoport module": [[18, "module-twpasolver.twoport"]], "twpasolver.typing module": [[19, "module-twpasolver.typing"]], "Implementing New Models": [[20, "implementing-new-models"]], "Adding a New TwoPortModel": [[20, "adding-a-new-twoportmodel"]], "Adding a New OnePortModel": [[20, "adding-a-new-oneportmodel"]], "Welcome to twpasolver\u2019s documentation!": [[21, "welcome-to-twpasolver-s-documentation"]], "Contents:": [[21, null]], "Api reference": [[21, null]], "Indices and tables": [[21, "indices-and-tables"]], "Installation": [[22, "installation"]], "Network models": [[23, "Network-models"]], "Overview": [[23, "Overview"]], "Example: Capacitor": [[23, "Example:-Capacitor"]], "ModelArrays": [[23, "ModelArrays"]], "Example: LC Resonator and resonators array": [[23, "Example:-LC-Resonator-and-resonators-array"]], "Constructing twpas": [[24, "Constructing-twpas"]], "Using predefined models": [[24, "Using-predefined-models"]], "Constructing models from basic components": [[24, "Constructing-models-from-basic-components"]], "3WM gain and TWPAnalysis": [[25, "3WM-gain-and-TWPAnalysis"]], "Overivew": [[25, "Overivew"]], "Example - Setup": [[25, "Example---Setup"]], "Phase matching": [[25, "Phase-matching"]], "Gain and bandwidth": [[25, "Gain-and-bandwidth"]], "Parameter sweeps": [[25, "Parameter-sweeps"]], "Gain as a function of pump frequency": [[25, "Gain-as-a-function-of-pump-frequency"]], "Compression point": [[25, "Compression-point"]], "Tutorials": [[26, "tutorials"]]}, "indexentries": {"module": [[1, "module-twpasolver"], [2, "module-twpasolver.analysis"], [3, "module-twpasolver.basemodel"], [4, "module-twpasolver.file_utils"], [5, "module-twpasolver.frequency"], [6, "module-twpasolver.logging"], [7, "module-twpasolver.mathutils"], [8, "module-twpasolver.matrices_arrays"], [9, "module-twpasolver.models"], [10, "module-twpasolver.models.compose"], [11, "module-twpasolver.models.modelarray"], [12, "module-twpasolver.models.oneport"], [13, "module-twpasolver.models.rf_functions"], [14, "module-twpasolver.models.transmission_lines"], [15, "module-twpasolver.models.twoportarrays"], [16, "module-twpasolver.models.twpa_cells"], [17, "module-twpasolver.plotting"], [18, "module-twpasolver.twoport"], [19, "module-twpasolver.typing"]], "twpasolver": [[1, "module-twpasolver"]], "analysis_function() (in module twpasolver.analysis)": [[2, "twpasolver.analysis.analysis_function"]], "args (twpasolver.analysis.executionrequest attribute)": [[2, "twpasolver.analysis.ExecutionRequest.args"]], "bandwidth() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.bandwidth"]], "data (twpasolver.analysis.analyzer attribute)": [[2, "twpasolver.analysis.Analyzer.data"]], "data_file (twpasolver.analysis.analyzer attribute)": [[2, "twpasolver.analysis.Analyzer.data_file"]], "execute() (twpasolver.analysis.analyzer method)": [[2, "twpasolver.analysis.Analyzer.execute"]], "gain() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.gain"]], "kwargs (twpasolver.analysis.executionrequest attribute)": [[2, "twpasolver.analysis.ExecutionRequest.kwargs"]], "load_data() (twpasolver.analysis.analyzer method)": [[2, "twpasolver.analysis.Analyzer.load_data"]], "load_model_from_file() (twpasolver.analysis.twpanalysis class method)": [[2, "twpasolver.analysis.TWPAnalysis.load_model_from_file"]], "model_post_init() (twpasolver.analysis.analyzer method)": [[2, "twpasolver.analysis.Analyzer.model_post_init"]], "model_post_init() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.model_post_init"]], "name (twpasolver.analysis.executionrequest attribute)": [[2, "twpasolver.analysis.ExecutionRequest.name"]], "parameter_sweep() (twpasolver.analysis.analyzer method)": [[2, "twpasolver.analysis.Analyzer.parameter_sweep"]], "phase_matching() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.phase_matching"]], "plot_gain() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.plot_gain"]], "plot_phase_matching() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.plot_phase_matching"]], "plot_response() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.plot_response"]], "run (twpasolver.analysis.analyzer attribute)": [[2, "twpasolver.analysis.Analyzer.run"]], "save_data() (twpasolver.analysis.analyzer method)": [[2, "twpasolver.analysis.Analyzer.save_data"]], "twpa (twpasolver.analysis.twpanalysis attribute)": [[2, "twpasolver.analysis.TWPAnalysis.twpa"]], "twpasolver.analysis": [[2, "module-twpasolver.analysis"]], "update_base_data() (twpasolver.analysis.analyzer method)": [[2, "twpasolver.analysis.Analyzer.update_base_data"]], "update_base_data() (twpasolver.analysis.twpanalysis method)": [[2, "twpasolver.analysis.TWPAnalysis.update_base_data"]], "dump_to_file() (twpasolver.basemodel.basemodel method)": [[3, "twpasolver.basemodel.BaseModel.dump_to_file"]], "from_file() (twpasolver.basemodel.basemodel class method)": [[3, "twpasolver.basemodel.BaseModel.from_file"]], "model_dump() (twpasolver.basemodel.basemodel method)": [[3, "twpasolver.basemodel.BaseModel.model_dump"]], "twpasolver.basemodel": [[3, "module-twpasolver.basemodel"]], "npencoder (class in twpasolver.file_utils)": [[4, "twpasolver.file_utils.NpEncoder"]], "add_extension() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.add_extension"]], "default() (twpasolver.file_utils.npencoder method)": [[4, "twpasolver.file_utils.NpEncoder.default"]], "ensure_directory_exists() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.ensure_directory_exists"]], "read_file() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.read_file"]], "read_hdf5() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.read_hdf5"]], "read_json() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.read_json"]], "save_to_file() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.save_to_file"]], "save_to_hdf5() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.save_to_hdf5"]], "save_to_json() (in module twpasolver.file_utils)": [[4, "twpasolver.file_utils.save_to_json"]], "twpasolver.file_utils": [[4, "module-twpasolver.file_utils"]], "f (twpasolver.frequency.frequencies property)": [[5, "twpasolver.frequency.Frequencies.f"]], "f_arange (twpasolver.frequency.frequencies attribute)": [[5, "twpasolver.frequency.Frequencies.f_arange"]], "f_list (twpasolver.frequency.frequencies attribute)": [[5, "twpasolver.frequency.Frequencies.f_list"]], "model_post_init() (twpasolver.frequency.frequencies method)": [[5, "twpasolver.frequency.Frequencies.model_post_init"]], "omega (twpasolver.frequency.frequencies property)": [[5, "twpasolver.frequency.Frequencies.omega"]], "twpasolver.frequency": [[5, "module-twpasolver.frequency"]], "unit (twpasolver.frequency.frequencies attribute)": [[5, "twpasolver.frequency.Frequencies.unit"]], "unit_multiplier (twpasolver.frequency.frequencies property)": [[5, "twpasolver.frequency.Frequencies.unit_multiplier"]], "customhandler (class in twpasolver.logging)": [[6, "twpasolver.logging.CustomHandler"]], "format() (twpasolver.logging.customhandler method)": [[6, "twpasolver.logging.CustomHandler.format"]], "twpasolver.logging": [[6, "module-twpasolver.logging"]], "cmeode_complete() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.CMEode_complete"]], "i_to_dbm() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.I_to_dBm"]], "a2s() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.a2s"]], "cme_solve() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.cme_solve"]], "compute_phase_matching() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.compute_phase_matching"]], "dbm_to_i() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.dBm_to_I"]], "matmul_2x2() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.matmul_2x2"]], "matpow_2x2() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.matpow_2x2"]], "s2a() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.s2a"]], "to_db() (in module twpasolver.mathutils)": [[7, "twpasolver.mathutils.to_dB"]], "twpasolver.mathutils": [[7, "module-twpasolver.mathutils"]], "a (twpasolver.matrices_arrays.abcdarray property)": [[8, "twpasolver.matrices_arrays.ABCDArray.A"]], "abcdarray (class in twpasolver.matrices_arrays)": [[8, "twpasolver.matrices_arrays.ABCDArray"]], "b (twpasolver.matrices_arrays.abcdarray property)": [[8, "twpasolver.matrices_arrays.ABCDArray.B"]], "c (twpasolver.matrices_arrays.abcdarray property)": [[8, "twpasolver.matrices_arrays.ABCDArray.C"]], "d (twpasolver.matrices_arrays.abcdarray property)": [[8, "twpasolver.matrices_arrays.ABCDArray.D"]], "s11 (twpasolver.matrices_arrays.smatrixarray property)": [[8, "twpasolver.matrices_arrays.SMatrixArray.S11"]], "s12 (twpasolver.matrices_arrays.smatrixarray property)": [[8, "twpasolver.matrices_arrays.SMatrixArray.S12"]], "s21 (twpasolver.matrices_arrays.smatrixarray property)": [[8, "twpasolver.matrices_arrays.SMatrixArray.S21"]], "s22 (twpasolver.matrices_arrays.smatrixarray property)": [[8, "twpasolver.matrices_arrays.SMatrixArray.S22"]], "smatrixarray (class in twpasolver.matrices_arrays)": [[8, "twpasolver.matrices_arrays.SMatrixArray"]], "twobytwoarray (class in twpasolver.matrices_arrays)": [[8, "twpasolver.matrices_arrays.TwoByTwoArray"]], "abcd_identity() (in module twpasolver.matrices_arrays)": [[8, "twpasolver.matrices_arrays.abcd_identity"]], "len (twpasolver.matrices_arrays.twobytwoarray property)": [[8, "twpasolver.matrices_arrays.TwoByTwoArray.len"]], "shape (twpasolver.matrices_arrays.twobytwoarray property)": [[8, "twpasolver.matrices_arrays.TwoByTwoArray.shape"]], "twpasolver.matrices_arrays": [[8, "module-twpasolver.matrices_arrays"]], "twpasolver.models": [[9, "module-twpasolver.models"]], "compose() (in module twpasolver.models.compose)": [[10, "twpasolver.models.compose.compose"]], "twpasolver.models.compose": [[10, "module-twpasolver.models.compose"]], "append() (twpasolver.models.modelarray.modelarray method)": [[11, "twpasolver.models.modelarray.ModelArray.append"]], "cells (twpasolver.models.modelarray.modelarray attribute)": [[11, "twpasolver.models.modelarray.ModelArray.cells"]], "twpasolver.models.modelarray": [[11, "module-twpasolver.models.modelarray"]], "validate_nested_cells() (twpasolver.models.modelarray.modelarray class method)": [[11, "twpasolver.models.modelarray.ModelArray.validate_nested_cells"]], "c (twpasolver.models.oneport.capacitance attribute)": [[12, "twpasolver.models.oneport.Capacitance.C"]], "c (twpasolver.models.oneport.stub attribute)": [[12, "twpasolver.models.oneport.Stub.C"]], "l (twpasolver.models.oneport.inductance attribute)": [[12, "twpasolver.models.oneport.Inductance.L"]], "l (twpasolver.models.oneport.stub attribute)": [[12, "twpasolver.models.oneport.Stub.L"]], "r (twpasolver.models.oneport.resistance attribute)": [[12, "twpasolver.models.oneport.Resistance.R"]], "y() (twpasolver.models.oneport.oneportmodel method)": [[12, "twpasolver.models.oneport.OnePortModel.Y"]], "z() (twpasolver.models.oneport.capacitance method)": [[12, "twpasolver.models.oneport.Capacitance.Z"]], "z() (twpasolver.models.oneport.inductance method)": [[12, "twpasolver.models.oneport.Inductance.Z"]], "z() (twpasolver.models.oneport.oneportarray method)": [[12, "twpasolver.models.oneport.OnePortArray.Z"]], "z() (twpasolver.models.oneport.oneportmodel method)": [[12, "twpasolver.models.oneport.OnePortModel.Z"]], "z() (twpasolver.models.oneport.resistance method)": [[12, "twpasolver.models.oneport.Resistance.Z"]], "z() (twpasolver.models.oneport.stub method)": [[12, "twpasolver.models.oneport.Stub.Z"]], "cells (twpasolver.models.oneport.oneportarray attribute)": [[12, "twpasolver.models.oneport.OnePortArray.cells"]], "length (twpasolver.models.oneport.stub attribute)": [[12, "twpasolver.models.oneport.Stub.length"]], "name (twpasolver.models.oneport.capacitance attribute)": [[12, "twpasolver.models.oneport.Capacitance.name"]], "name (twpasolver.models.oneport.inductance attribute)": [[12, "twpasolver.models.oneport.Inductance.name"]], "name (twpasolver.models.oneport.oneportarray attribute)": [[12, "twpasolver.models.oneport.OnePortArray.name"]], "name (twpasolver.models.oneport.resistance attribute)": [[12, "twpasolver.models.oneport.Resistance.name"]], "name (twpasolver.models.oneport.stub attribute)": [[12, "twpasolver.models.oneport.Stub.name"]], "open (twpasolver.models.oneport.stub attribute)": [[12, "twpasolver.models.oneport.Stub.open"]], "parallel (twpasolver.models.oneport.oneportarray attribute)": [[12, "twpasolver.models.oneport.OnePortArray.parallel"]], "single_abcd() (twpasolver.models.oneport.oneportmodel method)": [[12, "twpasolver.models.oneport.OnePortModel.single_abcd"]], "twoport_parallel (twpasolver.models.oneport.oneportmodel attribute)": [[12, "twpasolver.models.oneport.OnePortModel.twoport_parallel"]], "twpasolver.models.oneport": [[12, "module-twpasolver.models.oneport"]], "lclf_abcd() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.LCLf_abcd"]], "capacitance() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.capacitance"]], "get_stub_cell() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.get_stub_cell"]], "inductance() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.inductance"]], "lossless_line_abcd() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.lossless_line_abcd"]], "parallel_admittance_abcd() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.parallel_admittance_abcd"]], "series_impedance_abcd() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.series_impedance_abcd"]], "stub() (in module twpasolver.models.rf_functions)": [[13, "twpasolver.models.rf_functions.stub"]], "twpasolver.models.rf_functions": [[13, "module-twpasolver.models.rf_functions"]], "c (twpasolver.models.transmission_lines.losslesstl attribute)": [[14, "twpasolver.models.transmission_lines.LosslessTL.C"]], "l (twpasolver.models.transmission_lines.losslesstl attribute)": [[14, "twpasolver.models.transmission_lines.LosslessTL.L"], [14, "twpasolver.models.transmission_lines.LosslessTL.l"]], "z0 (twpasolver.models.transmission_lines.losslesstl property)": [[14, "twpasolver.models.transmission_lines.LosslessTL.Z0"]], "from_z_vp() (twpasolver.models.transmission_lines.losslesstl class method)": [[14, "twpasolver.models.transmission_lines.LosslessTL.from_z_vp"]], "name (twpasolver.models.transmission_lines.losslesstl attribute)": [[14, "twpasolver.models.transmission_lines.LosslessTL.name"]], "single_abcd() (twpasolver.models.transmission_lines.losslesstl method)": [[14, "twpasolver.models.transmission_lines.LosslessTL.single_abcd"]], "twpasolver.models.transmission_lines": [[14, "module-twpasolver.models.transmission_lines"]], "vp (twpasolver.models.transmission_lines.losslesstl property)": [[14, "twpasolver.models.transmission_lines.LosslessTL.vp"]], "idc (twpasolver.models.twoportarrays.twpa attribute)": [[15, "twpasolver.models.twoportarrays.TWPA.Idc"]], "ip0 (twpasolver.models.twoportarrays.twpa attribute)": [[15, "twpasolver.models.twoportarrays.TWPA.Ip0"]], "iratio (twpasolver.models.twoportarrays.twpa property)": [[15, "twpasolver.models.twoportarrays.TWPA.Iratio"]], "istar (twpasolver.models.twoportarrays.twpa attribute)": [[15, "twpasolver.models.twoportarrays.TWPA.Istar"]], "n_tot (twpasolver.models.twoportarrays.twpa property)": [[15, "twpasolver.models.twoportarrays.TWPA.N_tot"]], "alpha (twpasolver.models.twoportarrays.twpa property)": [[15, "twpasolver.models.twoportarrays.TWPA.alpha"]], "cells (twpasolver.models.twoportarrays.twoportarray attribute)": [[15, "twpasolver.models.twoportarrays.TwoPortArray.cells"]], "chi (twpasolver.models.twoportarrays.twpa property)": [[15, "twpasolver.models.twoportarrays.TWPA.chi"]], "epsilon (twpasolver.models.twoportarrays.twpa property)": [[15, "twpasolver.models.twoportarrays.TWPA.epsilon"]], "name (twpasolver.models.twoportarrays.twpa attribute)": [[15, "twpasolver.models.twoportarrays.TWPA.name"]], "name (twpasolver.models.twoportarrays.twoportarray attribute)": [[15, "twpasolver.models.twoportarrays.TwoPortArray.name"]], "single_abcd() (twpasolver.models.twoportarrays.twoportarray method)": [[15, "twpasolver.models.twoportarrays.TwoPortArray.single_abcd"]], "twpasolver.models.twoportarrays": [[15, "module-twpasolver.models.twoportarrays"]], "xi (twpasolver.models.twoportarrays.twpa property)": [[15, "twpasolver.models.twoportarrays.TWPA.xi"]], "c (twpasolver.models.twpa_cells.lclfbasecell attribute)": [[16, "twpasolver.models.twpa_cells.LCLfBaseCell.C"]], "c (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.C"]], "l (twpasolver.models.twpa_cells.lclfbasecell attribute)": [[16, "twpasolver.models.twpa_cells.LCLfBaseCell.L"]], "l (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.L"]], "lf (twpasolver.models.twpa_cells.lclfbasecell attribute)": [[16, "twpasolver.models.twpa_cells.LCLfBaseCell.Lf"]], "lf (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.Lf"]], "centered (twpasolver.models.twpa_cells.lclfbasecell attribute)": [[16, "twpasolver.models.twpa_cells.LCLfBaseCell.centered"]], "l1 (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.l1"]], "l2 (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.l2"]], "line (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.line"]], "name (twpasolver.models.twpa_cells.lclfbasecell attribute)": [[16, "twpasolver.models.twpa_cells.LCLfBaseCell.name"]], "name (twpasolver.models.twpa_cells.stubbasecell attribute)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.name"]], "single_abcd() (twpasolver.models.twpa_cells.lclfbasecell method)": [[16, "twpasolver.models.twpa_cells.LCLfBaseCell.single_abcd"]], "single_abcd() (twpasolver.models.twpa_cells.stubbasecell method)": [[16, "twpasolver.models.twpa_cells.StubBaseCell.single_abcd"]], "twpasolver.models.twpa_cells": [[16, "module-twpasolver.models.twpa_cells"]], "plot_gain() (in module twpasolver.plotting)": [[17, "twpasolver.plotting.plot_gain"]], "plot_phase_matching() (in module twpasolver.plotting)": [[17, "twpasolver.plotting.plot_phase_matching"]], "plot_response() (in module twpasolver.plotting)": [[17, "twpasolver.plotting.plot_response"]], "twpasolver.plotting": [[17, "module-twpasolver.plotting"]], "n (twpasolver.twoport.twoportmodel attribute)": [[18, "twpasolver.twoport.TwoPortModel.N"]], "twoportcell (class in twpasolver.twoport)": [[18, "twpasolver.twoport.TwoPortCell"]], "z0 (twpasolver.twoport.twoportcell property)": [[18, "twpasolver.twoport.TwoPortCell.Z0"]], "z0_ref (twpasolver.twoport.twoportmodel attribute)": [[18, "twpasolver.twoport.TwoPortModel.Z0_ref"]], "as_dict() (twpasolver.twoport.twoportcell method)": [[18, "twpasolver.twoport.TwoPortCell.as_dict"]], "dump_to_file() (twpasolver.twoport.twoportcell method)": [[18, "twpasolver.twoport.TwoPortCell.dump_to_file"]], "freqs (twpasolver.twoport.twoportcell property)": [[18, "twpasolver.twoport.TwoPortCell.freqs"]], "from_file() (twpasolver.twoport.twoportcell class method)": [[18, "twpasolver.twoport.TwoPortCell.from_file"]], "from_s() (twpasolver.twoport.twoportcell class method)": [[18, "twpasolver.twoport.TwoPortCell.from_s"]], "get_abcd() (twpasolver.twoport.twoportmodel method)": [[18, "twpasolver.twoport.TwoPortModel.get_abcd"]], "get_cell() (twpasolver.twoport.twoportmodel method)": [[18, "twpasolver.twoport.TwoPortModel.get_cell"]], "get_network() (twpasolver.twoport.twoportmodel method)": [[18, "twpasolver.twoport.TwoPortModel.get_network"]], "interpolate() (twpasolver.twoport.twoportcell method)": [[18, "twpasolver.twoport.TwoPortCell.interpolate"]], "s (twpasolver.twoport.twoportcell property)": [[18, "twpasolver.twoport.TwoPortCell.s"]], "single_abcd() (twpasolver.twoport.twoportmodel method)": [[18, "twpasolver.twoport.TwoPortModel.single_abcd"]], "to_network() (twpasolver.twoport.twoportcell method)": [[18, "twpasolver.twoport.TwoPortCell.to_network"]], "twpasolver.twoport": [[18, "module-twpasolver.twoport"]], "update() (twpasolver.twoport.twoportmodel method)": [[18, "twpasolver.twoport.TwoPortModel.update"]], "all_subclasses() (in module twpasolver.typing)": [[19, "twpasolver.typing.all_subclasses"]], "twpasolver.typing": [[19, "module-twpasolver.typing"]], "validate_impedance() (in module twpasolver.typing)": [[19, "twpasolver.typing.validate_impedance"]]}})